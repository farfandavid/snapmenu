---
import MenuLayout from "../layouts/MenuLayout.astro";
import type { IMenu } from "../types/Menu";
import { PRIVATE_ROUTES } from "../utils/constant";

if (PRIVATE_ROUTES.includes(Astro.url.pathname)) {
    return Astro.redirect("/dashboard");
}

const { menu } = Astro.params;
const currentMenu = await fetch(
    `http://localhost:4321/api/menu/getMenu?menuName=${menu}`,
);
const menuData: IMenu = await currentMenu.json();
if (menuData.error) {
    return Astro.redirect("/404");
}

//TODO: Add phone, address, logo img,openings hours and social media to the menu data
---

<MenuLayout title={menuData.name}>
    <div
        class="bg-slate-200 h-screen w-screen overflow-auto relative md:flex md:flex-col md:items-center"
    >
        <header
            style=`background: url(${menuData.bannerUrl}); background-size: cover; background-position: center; background-repeat: no-repeat;`
            class={`flex w-full md:w-3/5 min-h-64 max-h-64 overflow-hidden shadow-md`}
        >
            <div class="w-full bg-black/35 relative">
                <img
                    src={menuData.logoUrl}
                    alt={menuData.description}
                    class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded max-h-[150px]"
                />
                <div class="flex justify-between w-full p-3 absolute bottom-0">
                    <button
                        id="btn-map"
                        title="Ver en el mapa"
                        class="flex gap-2 bg-black/50 rounded-xl px-3 py-1"
                    >
                        <i class="bi bi-geo-alt-fill text-red-500"></i>
                        <p class="text-white font-bold">{menuData.address}</p>
                    </button>

                    <div
                        class="flex gap-2 bg-green-500 text-white font-bold rounded-xl px-3 py-1"
                    >
                        <i class="bi bi-clock-fill"></i>
                        <p>Abierto</p>
                    </div>
                </div>
            </div>
        </header>
        <iframe
            id="map-address"
            class="absolute z-10 ring-4 ring-white rounded-md shadow-md hidden transition-all duration-300 ease-in-out"
            src={menuData.mapUrl}
            width="250"
            height="250"
            style="border:0;"
            allowfullscreen=""
            loading="lazy"
            referrerpolicy="no-referrer-when-downgrade"></iframe>
        <section class="w-full md:w-3/5">
            <div class="mt-2 px-2 relative">
                <input
                    id="searchMenu"
                    name="datalist-products"
                    class="w-full rounded-lg p-2 pe-12 text-sm shadow-md bg-slate-50 placeholder:text-slate-500 ring-1 ring-slate-400"
                    placeholder="Buscar en el menu"
                    list="datalist-products"
                />
                <datalist id="datalist-products">
                    {
                        menuData.categories?.map((category) =>
                            category.products?.map((product) => (
                                <option value={product.name} />
                            )),
                        )
                    }
                </datalist>
                <span
                    class="absolute inset-y-0 end-0 grid place-content-center px-4 text-slate-500"
                >
                    <i class="bi bi-search"></i>
                </span>
            </div>

            <div class="px-2 mt-2">
                <ul
                    id="tabs"
                    class="flex items-center py-4 px-4 overflow-x-auto font-bold bg-slate-50 rounded-md ring-1 ring-slate-400 shadow-md"
                >
                    {
                        menuData.categories?.map((category) => (
                            <li class="px-2">
                                <button
                                    id={category._id}
                                    class="active"
                                    title={category.name}
                                >
                                    {category.name}
                                </button>
                            </li>
                        ))
                    }
                </ul>
            </div>

            <div id="tabs-content" class="px-2">
                {
                    menuData.categories?.map((category) => (
                        <div class="py-2 category" data-category={category._id}>
                            {category.products?.map((product) => (
                                <div
                                    class="grid grid-cols-5 grid-rows-2 bg-slate-50 backdrop-blur-md rounded mb-3 shadow-md ring-1 ring-slate-400"
                                    data-product={product.name}
                                    data-idproduct={product._id}
                                    data-price={product.price}
                                >
                                    <div class="col-span-4  py-2 px-2 font-medium">
                                        {product.name}
                                    </div>
                                    <div class="row-start-2 col-span-4  py-0 px-2">
                                        {product.description}
                                    </div>
                                    <div class="col-start-5 py-2 px-2 text-end font-bold">
                                        ${product.price}
                                    </div>
                                    <div class="col-start-5  py-2 px-2 text-end flex justify-end gap-1">
                                        <button
                                            class="bg-green-400 rounded-full aspect-square h-6 min-h-6 w-6 text-white font-extrabold flex items-center justify-center shadow-md"
                                            title={`Quitar del carrito ${product.name}`}
                                            data-minus
                                        >
                                            <i class="bi bi-dash" />
                                        </button>
                                        <span class="px-2 flex bg-slate-50 ring-1 ring-slate-400 rounded shadow-md h-6 w-6">
                                            0
                                        </span>
                                        <button
                                            class="bg-green-400 rounded-full aspect-square h-6 min-h-6 w-6 text-white font-extrabold flex items-center justify-center shadow-md"
                                            title={`Agregar al carrito ${product.name}`}
                                            data-plus
                                        >
                                            <i class="bi bi-plus" />
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ))
                }
            </div>
        </section>
        <button
            id="btn-cart"
            class="absolute top-3 right-3 bg-blue-400 text-white w-8 h-8 rounded-md content-center text-center"
            title="Ver mi orden"
            ><i class="bi bi-cart-fill"></i>
        </button>
        <div
            id="sidebar-menu"
            class="absolute top-0 -left-full w-screen h-screen transition-all duration-300 z-50 overflow-auto grid grid-cols-3"
        >
            <div
                class="bg-slate-200 col-span-2 md:col-span-1 w-full h-full relative"
            >
                <div
                    class="flex flex-col items-center justify-center p-2 w-full"
                >
                    <h1 class="text-black
                        font-bold">
                        Mi Orden
                    </h1>
                    <div id="order-list" class="flex flex-col w-full px-3">
                    </div>
                    <a
                        id="walink"
                        href="https://wa.me/543886455301"
                        data-phone="543886455301"
                        class="text-white bg-green-500 w-full p-2 rounded-md text-center mt-2"
                        target="_blank"
                        ><i class="bi bi-whatsapp mx-2"></i>Pedir</a
                    >
                </div>
                <footer
                    class="text-sm bg-slate-300 px-1 py-2 absolute bottom-0 w-full flex items-center justify-center"
                >
                    <p class="text-center">
                        &copy;2024 <a
                            href="https://www.snapmenu.online"
                            target="_blank"
                            class="text-orange-500 font-bold">SnapMenu</a
                        > Created by <a
                            href="https://farfetchdev.web.app/"
                            class="text-blue-400 font-bold"
                            ><strong>FarfetchDev</strong></a
                        >
                    </p>
                </footer>
            </div>
            <div id="sidebar-exit-menu" class="col-span-1 md:col-span-2 w-full">
            </div>
        </div>
    </div>
    <script>
        const buttons = document
            .getElementById("tabs")
            ?.getElementsByTagName(
                "button",
            ) as HTMLCollectionOf<HTMLButtonElement>;
        const categories = document.getElementById("tabs-content")
            ?.children as HTMLCollectionOf<HTMLElement>;
        const searchMenu = document.getElementById(
            "searchMenu",
        ) as HTMLInputElement;
        const products = document.querySelectorAll(
            "[data-product]",
        ) as NodeListOf<HTMLElement>;
        const cartButton = document.getElementById(
            "btn-cart",
        ) as HTMLButtonElement;
        const sidebarMenu = document.getElementById(
            "sidebar-menu",
        ) as HTMLElement;
        const sidebarExitMenu = document.getElementById(
            "sidebar-exit-menu",
        ) as HTMLElement;

        const mapAddress = document.getElementById(
            "map-address",
        ) as HTMLIFrameElement;
        const btnMap = document.getElementById("btn-map") as HTMLButtonElement;

        btnMap.addEventListener("click", () => {
            if (btnMap.classList.contains("bg-black/50")) {
                btnMap.classList.replace("bg-black/50", "bg-green-600/75");
            } else {
                btnMap.classList.replace("bg-green-600/75", "bg-black/50");
            }
            mapAddress.classList.toggle("hidden");
            mapAddress.style.top = `${btnMap.getBoundingClientRect().top + btnMap.getBoundingClientRect().height}px`;
            mapAddress.style.left = `${btnMap.getBoundingClientRect().left}px`;
        });

        document.addEventListener("click", (e: any) => {
            if (!btnMap.contains(e.target)) {
                btnMap.classList.replace("bg-green-600/75", "bg-black/50");
                mapAddress.classList.add("hidden");
            }
        });

        const orderList = document.getElementById("order-list") as HTMLElement;
        const walink = document.getElementById("walink") as HTMLAnchorElement;
        const message = () => {
            let message =
                "Hola, me gustaría hacer un pedido con los siguientes productos:\n";
            for (let i = 0; i < cart.length; i++) {
                const item = cart[i];
                message += `${item.quantity}x ${item.name}......$${item.price * item.quantity}\n`;
            }
            message += `por un total de $${cart.reduce(
                (acc, item) => acc + parseFloat(item.price) * item.quantity,
                0,
            )}.`;

            return encodeURIComponent(message);
        };
        function updateOrder() {
            orderList.innerHTML = "";
            let total = 0;
            for (let i = 0; i < cart.length; i++) {
                const item = cart[i];
                total += parseFloat(item.price) * item.quantity;
                orderList.innerHTML += `
                    <div class="grid grid-cols-5 w-full">
                        <p class="col-span-1 flex justify-center">${item.quantity}x</p>
                        <p class="col-span-2">${item.name}</p>
                        <p class="col-span-2 flex justify-end">$${item.price * item.quantity}</p>
                    </div>
                `;
            }
            orderList.innerHTML += `
                <div class="grid grid-cols-5 w-full border-t-2 border-t-slate-400">
                    <p class="col-span-3 flex justify-start">Total</p>
                    <p class="col-span-2 flex justify-end">$${total}</p>
                </div>
            `;
            walink.href = `https://wa.me/${walink.dataset.phone}?text=${message()}`;
        }

        sidebarExitMenu.addEventListener("click", () => {
            sidebarMenu.classList.toggle("left-0");
            sidebarMenu.classList.toggle("-left-full");
        });

        cartButton.addEventListener("click", () => {
            sidebarMenu.classList.toggle("left-0");
            sidebarMenu.classList.toggle("-left-full");
        });
        let cart: any[] = [];

        // Add and remove products from cart
        for (let i = 0; i < products.length; i++) {
            const product = products[i];
            const plus = product.querySelector(
                "[data-plus]",
            ) as HTMLButtonElement;
            const minus = product.querySelector(
                "[data-minus]",
            ) as HTMLButtonElement;
            const quantity = product.querySelector("span") as HTMLSpanElement;
            let count = 0;
            plus.addEventListener("click", () => {
                count++;
                quantity.textContent = count.toString();
                if (
                    cart.some((item) => item.id === product.dataset.idproduct)
                ) {
                    cart = cart.map((item) => {
                        if (item.id === product.dataset.idproduct) {
                            item.quantity = count;
                        }
                        return item;
                    });
                } else {
                    cart.push({
                        id: product.dataset.idproduct,
                        name: product.dataset.product,
                        price: product.dataset.price,
                        quantity: count,
                    });
                }
                console.log(cart);
                updateOrder();
            });
            minus.addEventListener("click", () => {
                count--;
                if (count < 0) {
                    count = 0;
                } else {
                    cart = cart.filter((item) => {
                        if (item.id === product.dataset.idproduct) {
                            item.quantity = count;
                        }
                        return item.quantity > 0;
                    });
                    console.log(cart);
                }
                quantity.textContent = count.toString();
                updateOrder();
            });
        }

        for (let i = 1; i < categories.length; i++) {
            categories[i].classList.add("hidden");
        }
        for (let i = 1; i < buttons.length; i++) {
            buttons[i].classList.add("text-slate-400");
            buttons[i].classList.remove("active");
        }
        for (let i = 0; i < buttons.length; i++) {
            buttons[i].addEventListener("click", () => {
                for (let j = 0; j < buttons.length; j++) {
                    buttons[j].classList.add("text-slate-400");
                    buttons[j].classList.remove("active");
                    buttons[j].classList.remove("text-slate-800");
                    categories[j].classList.add("hidden");
                }
                buttons[i].classList.remove("text-slate-400");
                buttons[i].classList.add("text-slate-800");
                buttons[i].classList.add("active");
                categories[i].classList.remove("hidden");
            });
        }

        searchMenu.addEventListener("input", () => {
            const searchValue = searchMenu.value.toLowerCase();
            for (let i = 0; i < categories.length; i++) {
                categories[i].classList.remove("hidden");
                for (let j = 0; j < categories[i].children.length; j++) {
                    const product = categories[i].children[j] as HTMLElement;
                    if (
                        product.dataset.product
                            ?.toLowerCase()
                            .includes(searchValue)
                    ) {
                        product.classList.remove("hidden");
                    } else {
                        product.classList.add("hidden");
                    }
                }
            }
        });
    </script>
    <style>
        .active {
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
            padding: 0 0.5rem;
        }
    </style>
</MenuLayout>
