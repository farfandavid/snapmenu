---
import { Menu } from "../../../server/class/Menu";

interface Props {
    menus: Menu[];
}

const { menus } = Astro.props;
---

<form
    id="change-name-form"
    class="flex flex-col items-center w-full p-5 gap-2 bg-slate-50 rounded border border-orange-300 shadow-md overflow-hidden relative lg:w-1/3"
>
    <h2 class="text-xl font-bold">Cambiar Nombre</h2>
    <p class="text-xs">
        <i class="bi bi-info-circle"></i> Al cambiar el nombre se cambia el url
    </p>
    <div class="flex items-center gap-1 p-2 rounded w-full">
        <label for="menuId" class="w-fit text-nowrap">Selecciona el Menu</label>
        <select
            id="menuId"
            name="menuId"
            class="w-full p-2 rounded ring-1 ring-slate-500"
        >
            {
                menus?.map((menu) => (
                    <option value={menu._id?.toString()}>{menu.name}</option>
                ))
            }
        </select>
    </div>

    <label for="menuName" class="flex flex-col w-full"
        >Elige el nombre para tu SnapMenu
        <p class="text-xs">
            <i class="bi bi-info-circle"></i>
            El nombre debe ser Alfanumerico sin espacios, minimo 4 caracteres
        </p>
    </label>
    <div
        class="flex items-center gap-1 p-2 rounded ring-1 ring-slate-500 w-full bg-white"
    >
        <label class="w-fit" for="menuName">www.snapmenu.online/</label>
        <input
            type="text"
            name="menuName"
            id="menuName"
            class="w-full"
            placeholder="Nombre de tu Local"
            required
            autocomplete="off"
            maxlength="30"
            minlength="4"
        />
    </div>
    <button
        class="flex gap-1 bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded mt-2 justify-center h-10 items-center w-full"
        type="button"
        id="check-availability"
    >
        <svg
            class="w-5 h-5 animate-spin hidden"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            data-icon="SvgLoader"
            aria-hidden="true"
            id="loader"
        >
            <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"></circle>
            <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
        </svg>
        <span id="txt-buttoncheck">Comprobar Disponibilidad</span>
    </button>
    <button
        class="hidden gap-1 bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded mt-2 justify-center h-10 items-center w-full"
        id="btn-submit"
    >
        Cambiar
    </button>
</form>

<script>
    const checkAvailability = document.getElementById(
        "check-availability",
    ) as HTMLButtonElement;
    const loader = document.getElementById("loader") as HTMLElement;
    const name = document.getElementById("menuName") as HTMLInputElement;
    const formChangeName = document.getElementById(
        "change-name-form",
    ) as HTMLFormElement;

    formChangeName.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(formChangeName);
        const res = await fetch("/api/dashboard/change-name", {
            method: "PUT",
            body: formData,
        });
        if (res.status === 200) {
            alert("Nombre Cambiado");
            window.location.reload();
        } else {
            alert("Error al cambiar el nombre");
        }
    });
    checkAvailability.addEventListener("click", async (e) => {
        const inputValue = name.value;
        const textCheck = document.getElementById(
            "txt-buttoncheck",
        ) as HTMLSpanElement;
        const payButton = document.getElementById(
            "pay-button",
        ) as HTMLButtonElement;
        const submitButton = document.getElementById(
            "btn-submit",
        ) as HTMLButtonElement;

        loader.classList.remove("hidden");
        textCheck.classList.add("hidden");
        setTimeout(async () => {
            const data = await fetch(`/api/dashboard/menu/${inputValue}`);
            loader.classList.add("hidden");
            textCheck.classList.remove("hidden");
            if (data.status === 404 || inputValue.length <= 3) {
                textCheck.textContent = "No Disponible";
                checkAvailability.classList.remove("bg-orange-500");
                checkAvailability.classList.remove("bg-green-500");
                checkAvailability.classList.add("bg-red-500");
                submitButton.classList.remove("flex");
                submitButton.classList.add("hidden");
                submitButton.disabled = true;
            } else {
                textCheck.textContent = "Disponible";
                checkAvailability.classList.remove("bg-orange-500");
                checkAvailability.classList.remove("bg-red-500");
                checkAvailability.classList.add("bg-green-500");
                submitButton.classList.remove("hidden");
                submitButton.classList.add("flex");
                submitButton.disabled = false;
            }
        }, 1500);
    });
</script>
